package com.omni.code.service;

import com.omni.code.entity.Order;
import com.omni.code.entity.OrderItem;
import com.omni.code.mapper.InventoryMapper;
import com.omni.code.mapper.OrderItemMapper;
import com.omni.code.mapper.OrderMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Service
public class CheckoutService {

    @Autowired
    private OrderMapper orderMapper;

    @Autowired
    private OrderItemMapper orderItemMapper;

    @Autowired
    private InventoryMapper inventoryMapper;

    @Transactional
    public void checkout(String userId, List<OrderItem> items, String address) {
        // Create an order
        Order order = new Order();
        order.setUserId(userId);
        order.setCreatedAt(LocalDateTime.now());
        order.setOrderStatus("Pending"); // Set initial status
        order.setPaymentStatus("Pending");
        order.setAddress(address);
        // Calculate total amount
        BigDecimal totalAmount = calculateTotalAmount(items);
        order.setTotalAmount(totalAmount);
        orderMapper.insertOrder(order);
        Long orderId = order.getOrderId(); // Assume this is generated by the database

        // Process each item in the order
        for (OrderItem item : items) {
            // Check inventory
            Integer stockQuantity = inventoryMapper.checkStock(item.getProductId());

            if (stockQuantity == null || stockQuantity < item.getQuantity()) {
                throw new IllegalArgumentException("Insufficient stock for product ID: " + item.getProductId());
            }

            // Deduct stock
            inventoryMapper.deductStock(item.getProductId(), item.getQuantity());

            // Set the order ID and insert the order item
            item.setOrderId(orderId);
            orderItemMapper.insertOrderItem(item);
        }
    }

    private BigDecimal calculateTotalAmount(List<OrderItem> items) {
        return items.stream()
                .map(item -> item.getPrice().multiply(new BigDecimal(item.getQuantity()))) // Calculate item total
                .reduce(BigDecimal.ZERO, BigDecimal::add); // Sum all item totals
    }
}

